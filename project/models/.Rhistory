knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(rstan)
library(bayesplot)
options(mc.cores = parallel::detectCores())
Y_A <- c(115, 120, 111, 123, 116,
121, 118, 116, 127, 129)
Y_B <- c(123, 131, 113, 119, 123,
113, 128, 126, 125, 128)
data = list(n_A = length(Y_A), n_B = length(Y_B),
Y_A = Y_A, Y_B = Y_B)
fit <- stan("./stan_model/training_workers.stan", iter = 1000, chains = 4,
data = data)
fit
posterior <- as.matrix(fit)
mu_A_post <- posterior[,"mu_A"]
mu_B_post <- posterior[,"mu_B"]
acf(mu_A_post)
acf(mu_B_post)
traceplot(fit)
plot(density(mu_A_post))
plot(density(mu_B_post))
plot_title <- ggtitle("Posterior distributions of mu_A and mu_B", "with medians and 80% intervals")
mcmc_areas(posterior,
pars = c("mu_A", "mu_B"),
prob = 0.8) + plot_title
mcmc_trace(posterior,
pars = c("mu_A", "mu_B"),
facet_args = list(nrow = 2))
diff <- mu_A_post - mu_B_post
plot(density(diff))
plot(density(posterior[,"diff"]))
quantile(diff)
?quantile
quantile(diff, c(0.025, 0.975))
quantile(posterior[,"diff"], c(0.025, 0.975))
quantile(posterior[,"diff"], c(0.025, 0.975))
plot(density(posterior[,"diff"]))
quantile(posterior[,"diff"], c(0.025, 0.975))
plot(density(posterior[,"diff"]))
mcmc_trace(posterior,
pars = c("mu_A", "mu_B"),
facet_args = list(nrow = 2))
mcmc_areas(posterior,
pars = c("mu_A", "mu_B"),
prob = 0.8) + plot_title
mcmc_areas(posterior,
pars = c("diff"),
prob = 0.8) + plot_title
mcmc_areas(posterior,
pars = c("diff"),
prob = c(0.025, 0.975)) + plot_title
mcmc_areas(posterior,
pars = c("diff"),
prob = c(0.25, 0.975)) + plot_title
mcmc_areas(posterior,
mcmc_areas(posterior,
mcmc_areas(posterior,
pars = c("diff"),
prob = 0.95) + plot_title
)
}
mcmc_areas(posterior,
pars = c("diff"),
prob = 0.95) + plot_title
plot_title <- ggtitle("Posterior distributions of mu_A - mu_B", "with median and 95% credible interval")
mcmc_areas(posterior,
pars = c("diff"),
prob = 0.95) + plot_title
quantile(posterior[,"diff"], c(0.025, 0.975))
plot_title <- ggtitle("Posterior distributions of mu_A - mu_B", "with median and 95% credible interval")
mcmc_areas(posterior,
pars = c("diff"),
prob = 0.95) + plot_title
quantile(posterior[,"diff"], c(0.025, 0.975))
plot_title <- ggtitle("Posterior distributions of mu_A - mu_B", "with median and 95% credible interval")
mcmc_areas(posterior,
pars = c("diff"),
prob = 0.95) + plot_title
install.packages("stringi")
gam <- rgamma(1000, 1, rate = 1)
plot(gam)
hist(gam)
gam <- rgamma(1000, 5, rate = 1)
hist(gam)
hist(gam)
?dgamma
1:10:0.1
knitr::opts_chunk$set(echo = TRUE)
plot(function(x)dgamma(x,shape=6,rate=1))
plot(function(x)dgamma(x,shape=6,rate=1),xlim=c(0,10))
plot(function(x)dgamma(x,shape=6,rate=5),xlim=c(0,20))
plot(function(x)dgamma(x,shape=6,rate=0.01),xlim=c(0,20))
plot(function(x)dgamma(x,shape=100,rate=20),xlim=c(0,20))
plot(function(x)dgamma(x,shape=1,rate=0.2),xlim=c(0,20))
plot(function(x)dgamma(x,shape=10,rate=2),xlim=c(0,20))
plot(function(x)dgamma(x,shape=5,rate=1),xlim=c(0,20))
plot(function(x)dgamma(x,shape=5,rate=1),xlim=c(0,20))
plot(function(x)dgamma(x,shape=1,rate=0.1),xlim=c(0,20))
plot(function(x)dgamma(x,shape=2,rate=0.1),xlim=c(0,20))
plot(function(x)dgamma(x,shape=2,rate=0.2),xlim=c(0,20))
plot(function(x)dgamma(x,shape=2,rate=0.3),xlim=c(0,20))
plot(function(x)dgamma(x,shape=2,rate=0.33),xlim=c(0,20))
?rstan
library(rstan)
?rstan
library(rstan)
library(bayesplot)
library(tidyverse)
setwd("~/Documents/colab/bayesian/project/models")
library(rstan)
library(bayesplot)
library(tidyverse)
library(Hmisc)
library(ggplot2)
library(xtable)
set.seed(1234)
fit1 <- readRDS("../model1_FIT15k.rds") # Load one object.
# Convergence analysis.
print(fit1)
traceplot(fit1)
# Lag en ok LaTeX tabell!
xtable(summary(fit1)$summary)
# Annen måte å plotte chainsene på.
# https://mc-stan.org/users/documentation/case-studies/identifying_mixture_models.html
# Lånt fra lenken: kan være grei å bruke for å sjekke at alt er greit underveis også!
chains1 <- as.data.frame(rstan::extract(fit1, permuted=FALSE)[,1,])
chains2 <- as.data.frame(rstan::extract(fit1, permuted=FALSE)[,2,])
chains3 <- as.data.frame(rstan::extract(fit1, permuted=FALSE)[,3,])
chains4 <- as.data.frame(rstan::extract(fit1, permuted=FALSE)[,4,])
par(mar = c(4, 4, 1.5, 1))
plot(chains1$mu1, chains1$mu2, col="black", pch=16, cex=0.8,
xlab="mu1", ylab="mu2", xlim = c(130, 140), ylim = c(270, 300),
main = "Chains for mu1 and mu2 Plotted in Two Dimensions")
points(chains2$mu1, chains2$mu2, col=rgb(red = 1, green = 0, blue = 0, alpha = 0.5), pch=16, cex=0.8)
points(chains3$mu1, chains3$mu2, col=rgb(red = 0, green = 1, blue = 0, alpha = 0.4), pch=16, cex=0.8)
points(chains4$mu1, chains4$mu2, col=rgb(red = 0, green = 0, blue = 1, alpha = 0.3), pch=16, cex=0.8)
#lines(0.08*(1:100) - 4, 0.08*(1:100) - 4, col="grey", lw=2)
legend("topright", c("Chain 1", "Chain 2", "Chain 3", "Chain 4"),
fill=c("black", "red",
"yellow", "blue"), box.lty=0, inset=0.0005)
posterior <- as.data.frame(fit1)
head(posterior)
dim(posterior)
data.frame(posterior %>% select(y_pred)) %>%
ggplot(aes(y_pred)) +
geom_density(aes(y = (..count..)/sum(..count..))) +
ggtitle("Mix of Gaussian") +
ylab("Posterior Predictive Distribution") +
xlab("Duration [days]")
### Model Checking.
N <- 10000
n <- dim(posterior)[[1]]
# We select the statistics 1st quart, median and 3rd quart.
statistic.distrs <- list(first = rep(NA, n), median = rep(NA, n),
mean = rep(NA, n), third = rep(NA, n))
for(i in 1:n){
# Simulate the posterior distribution using every simulated value from MCMC fit (Stan) once.
p<- posterior$p[i]
mu1 <- posterior$mu1[i]
mu2 <- posterior$mu2[i]
sigma <- posterior$sigma[i]
components <- sample(1:2,prob=c(p,1-p),size=N,replace=TRUE)
mus <- c(mu1,mu2)
sds <- c(sigma,sigma)
samples <- rnorm(N)*sds[components]+mus[components]
# Simulate from the posterior distribution.
q <- quantile(samples, c(0.25, 0.5, 0.75))
statistic.distrs$first[i] <- q[1][[1]]
statistic.distrs$median[i] <- q[2][[1]]
statistic.distrs$mean[i] <- mean(samples)
statistic.distrs$third[i] <- q[3][[1]]
}
# Compare with the same statistics in the data. The "data" in this case is the sampled data point
# used to fit the model fith Stan.
q.data <- quantile(dur, c(0.25, 0.5, 0.75))
# Read the training data set that was sampled.
data <- readRDS("../15kpoints.rds") # Load the sampled data.
# We want to model the duration of the student exchange.
dur <- data$duration
# Compare with the same statistics in the data. The "data" in this case is the sampled data point
# used to fit the model fith Stan.
q.data <- quantile(dur, c(0.25, 0.5, 0.75))
stat.data <- list(first = q.data[1][[1]], median = q.data[2][[1]],
mean = mean(dur), third = q.data[3][[1]])
df <- cbind(statistic.distrs$first, statistic.distrs$mean, statistic.distrs$median, statistic.distrs$third)
colnames(df) <- c("25%", "Mean", "50%", "75%")
# Want to make nice ggplot with all four statistics (using facets).
df2 <- as.data.frame(df) %>%
gather(key = Statistic, value = value_dens)
df2 <- df2 %>% mutate(line = c(rep(stat.data$first, n), rep(stat.data$mean, n),
rep(stat.data$median, n), rep(stat.data$third, n)))
df2 %>%
ggplot() +
geom_density(aes(x = value_dens, y = (..count..)/sum(..count..))) +
geom_vline(aes(xintercept = line)) +
#facet_grid(rows = vars(Statistic), scales = "free")
facet_wrap(~Statistic, scales = "free")
# We select the statistics 1st quart, median and 3rd quart.
q.sim <- quantile(y_pred, c(0.25, 0.5, 0.75))
# We select the statistics 1st quart, median and 3rd quart.
q.sim <- quantile(posterior$y_pred, c(0.25, 0.5, 0.75))
q.sim
?rnorm
library(rstan)
library(bayesplot)
library(tidyverse)
library(Hmisc)
library(ggplot2)
library(xtable)
set.seed(1234)
# Read the training data set that was sampled.
data <- readRDS("../15kpoints.rds") # Load the sampled data.
# We want to model the duration of the student exchange.
dur <- data$duration
points <- dim(data)[[1]] # Or length(dur)
data_list <- list(
n=points,
y=dur
)
library(rstan)
library(bayesplot)
library(tidyverse)
library(Hmisc)
library(ggplot2)
library(xtable)
# Read the training data set that was sampled.
data <- readRDS("../15kpoints.rds") # Load the sampled data.
# Omit the unknown genders for our regression model
data <- data %>% filter(gender == "Female" | gender == "Male")
data$gender <- as.integer(data$gender) - 1
describe(data)
# Sample 5k points from the 15k sample to begin with.
points <- dim(data)[[1]]
data_list <- list(
n=points,
y=data$duration,
x1=data$age,
x2=data$gender
)
fit4 <- stan("../stan_models/model4.stan", iter = 1000, chains = 4,
data = data_list, seed = 1)
# Save the fitted object in order to not run again every time.
# Analysis can easily be done later by loading this object.
saveRDS(fit4, file = "../model4_FIT15k.rds") # Used for saving one object.
# Load the (already) generated object into scope.
fit4 <- readRDS("../model4_FIT15k.rds") # Load one object.
# Convergence analysis.
print(fit4)
traceplot(fit4)
# Lag en ok LaTeX tabell!
xtable(summary(fit4)$summary)
posterior <- as.data.frame(fit4)
y_pred <- posterior[, "y_pred"]
plot(density(y_pred))
tibble(y_pred) %>%
ggplot(aes(y_pred)) +
geom_density(aes(y = (..count..)/sum(..count..))) +
ggtitle("Mix of Gaussian")
ggsave("../626fca86090ba51a6aff419a/plots/postpred4.pdf", width = 7, height = 5)
beta1 <- posterior[, "beta1"]
tibble(beta1) %>%
ggplot(aes(beta1)) +
geom_density(aes(y = (..count..)/sum(..count..))) +
ggtitle("Mix of Gaussian")
tibble(beta1) %>%
ggplot(aes(beta1)) +
geom_density(aes(y = (..count..)/sum(..count..))) +
ggtitle("Posterior distribution of beta1")
ggsave("../626fca86090ba51a6aff419a/plots/postbeta1.pdf", width = 7, height = 5)
# We select the statistics 1st quart, median and 3rd quart.
q.sim <- quantile(y_pred, c(0.25, 0.5, 0.75))
q.sim
# Compare with the same statistics in the data.
q.data <- quantile(data$duration, c(0.25, 0.5, 0.75))
q.data
quantile(posterior$beta1, c(0.025, 0.975))
quantile(posterior$beta2, c(0.025, 0.975))
mean(posterior$beta1)
mean(posterior$beta2)
# Read the training data set that was sampled.
data <- readRDS("../15kpoints.rds") # Load the sampled data.
points <- 500
points <- 500
data_list <- list(
n=points,
y=data$duration,
x1=data$age,
x2=data$gender
)
fit4 <- stan("../stan_models/model4.stan", iter = 1000, chains = 4,
data = data_list, seed = 1)
points <- 500
sample_df <- data[sample(1:nrow(data), points),]
data <- data[sample(1:nrow(data), points),]
data_list <- list(
n=points,
y=data$duration,
x1=data$age,
x2=data$gender
)
fit4 <- stan("../stan_models/model4.stan", iter = 1000, chains = 4,
data = data_list, seed = 1)
sample_df <- data[sample(1:nrow(data), points),]
data_list <- list(
n=points,
y=sample_df$duration,
x1=sample_df$age,
x2=sample_df$gender
)
fit4 <- stan("../stan_models/model4.stan", iter = 1000, chains = 4,
data = data_list, seed = 1)
data_list <- list(
n=points,
y=sample_df$duration,
x1=sample_df$age,
x2=as.numeric(sample_df$gender)
)
data_list <- list(
n=points,
y=sample_df$duration,
x1=sample_df$age,
x2=as.numeric(sample_df$gender)
)
fit4 <- stan("../stan_models/model4.stan", iter = 1000, chains = 4,
data = data_list, seed = 1)
print(fit4)
# Convergence analysis.
print(fit4)
traceplot(fit4)
posterior <- as.data.frame(fit4)
y_pred <- posterior[, "y_pred"]
plot(density(y_pred))
tibble(y_pred) %>%
ggplot(aes(y_pred)) +
geom_density(aes(y = (..count..)/sum(..count..))) +
ggtitle("Mix of Gaussian")
beta1 <- posterior[, "beta1"]
tibble(beta1) %>%
ggplot(aes(beta1)) +
geom_density(aes(y = (..count..)/sum(..count..))) +
ggtitle("Posterior distribution of beta1")
# We select the statistics 1st quart, median and 3rd quart.
q.sim <- quantile(y_pred, c(0.25, 0.5, 0.75))
q.sim
# Compare with the same statistics in the data.
q.data <- quantile(data$duration, c(0.25, 0.5, 0.75))
q.data
points <- 5000
sample_df <- data[sample(1:nrow(data), points),]
points <- 5000
sample_df <- data[sample(1:nrow(data), points),]
# Read the training data set that was sampled.
data <- readRDS("../15kpoints.rds") # Load the sampled data.
# Omit the unknown genders for our regression model
data <- data %>% filter(gender == "Female" | gender == "Male")
data$gender <- as.integer(data$gender) - 1
describe(data)
# Sample 5k points from the 15k sample to begin with.
points <- dim(data)[[1]]
points <- 5000
sample_df <- data[sample(1:nrow(data), points),]
data_list <- list(
n=points,
y=sample_df$duration,
x1=sample_df$age,
x2=as.numeric(sample_df$gender)
)
fit4 <- stan("../stan_models/model4.stan", iter = 1000, chains = 4,
data = data_list, seed = 1)
# Convergence analysis.
print(fit4)
traceplot(fit4)
# Lag en ok LaTeX tabell!
xtable(summary(fit4)$summary)
posterior <- as.data.frame(fit4)
y_pred <- posterior[, "y_pred"]
plot(density(y_pred))
tibble(y_pred) %>%
ggplot(aes(y_pred)) +
geom_density(aes(y = (..count..)/sum(..count..))) +
ggtitle("Mix of Gaussian")
beta1 <- posterior[, "beta1"]
tibble(beta1) %>%
ggplot(aes(beta1)) +
geom_density(aes(y = (..count..)/sum(..count..))) +
ggtitle("Posterior distribution of beta1")
# Load the (already) generated object into scope.
fit4 <- readRDS("../model4_FIT15k.rds") # Load one object.
# Convergence analysis.
print(fit4)
traceplot(fit4)
posterior <- as.data.frame(fit4)
y_pred <- posterior[, "y_pred"]
plot(density(y_pred))
tibble(y_pred) %>%
ggplot(aes(y_pred)) +
geom_density(aes(y = (..count..)/sum(..count..))) +
ggtitle("Mix of Gaussian")
beta1 <- posterior[, "beta1"]
tibble(beta1) %>%
ggplot(aes(beta1)) +
geom_density(aes(y = (..count..)/sum(..count..))) +
ggtitle("Posterior distribution of beta1")
beta2 <- posterior[, "beta1"]
tibble(beta2) %>%
ggplot(aes(beta2)) +
geom_density(aes(y = (..count..)/sum(..count..))) +
ggtitle("Posterior distribution of beta2")
ggsave("../626fca86090ba51a6aff419a/plots/postbeta2.pdf", width = 7, height = 5)
beta1 <- posterior[, "beta1"]
tibble(beta1) %>%
ggplot(aes(beta1)) +
geom_density(aes(y = (..count..)/sum(..count..))) +
ggtitle("Posterior distribution of beta1")
ggsave("../626fca86090ba51a6aff419a/plots/postbeta1.pdf", width = 7, height = 5)
tibble(beta1) %>%
ggplot(aes(beta1)) +
geom_density(aes(y = (..count..)/sum(..count..))) +
ggtitle("Posterior distribution of beta1")
tibble(beta2) %>%
ggplot(aes(beta2)) +
geom_density(aes(y = (..count..)/sum(..count..))) +
ggtitle("Posterior distribution of beta2")
beta2 <- posterior[, "beta2"]
tibble(beta2) %>%
ggplot(aes(beta2)) +
geom_density(aes(y = (..count..)/sum(..count..))) +
ggtitle("Posterior distribution of beta2")
ggsave("../626fca86090ba51a6aff419a/plots/postbeta2.pdf", width = 7, height = 5)
# We select the statistics 1st quart, median and 3rd quart.
q.sim <- quantile(y_pred, c(0.25, 0.5, 0.75))
q.sim
# Compare with the same statistics in the data.
q.data <- quantile(data$duration, c(0.25, 0.5, 0.75))
q.data
quantile(posterior$beta1, c(0.025, 0.975))
quantile(posterior$beta2, c(0.025, 0.975))
mean(posterior$beta1)
mean(posterior$beta2)
# Load the (already) generated object into scope.
fit4 <- readRDS("../model4_FIT15k.rds") # Load one object.
# Convergence analysis.
print(fit4)
traceplot(fit4)
ggsave("../626fca86090ba51a6aff419a/plots/traceplot4.pdf", width = 7, height = 5)
# Lag en ok LaTeX tabell!
xtable(summary(fit4)$summary)
posterior <- as.data.frame(fit4)
y_pred <- posterior[, "y_pred"]
plot(density(y_pred))
tibble(y_pred) %>%
ggplot(aes(y_pred)) +
geom_density(aes(y = (..count..)/sum(..count..))) +
ggtitle("Mix of Gaussian")
library(rstan)
library(bayesplot)
library(tidyverse)
library(Hmisc)
library(ggplot2)
library(xtable)
# Read the training data set that was sampled.
data <- readRDS("../15kpoints.rds") # Load the sampled data.
describe(data)
data_list <- list(
n=points,
y=data$duration
)
fit3 <- stan("../stan_models/model3.stan", iter = 1000, chains = 4,
data = data_list, seed = 1)
# Read the training data set that was sampled.
data <- readRDS("../15kpoints.rds") # Load the sampled data.
# We want to model the duration of the student exchange.
dur <- data$duration
set.seed(1234)
# Read the training data set that was sampled.
data <- readRDS("../15kpoints.rds") # Load the sampled data.
describe(data)
points <- dim(data)[[1]]
data_list <- list(
n=points,
y=data$duration
)
fit3 <- stan("../stan_models/model3.stan", iter = 1000, chains = 4,
data = data_list, seed = 1)
# Convergence analysis.
print(fit3)
traceplot(fit3)
# Save the fitted object in order to not run again every time.
# Analysis can easily be done later by loading this object.
saveRDS(fit3, file = "../model3_FIT15k.rds") # Used for saving one object.
# Load the (already) generated object into scope.
fit3 <- readRDS("../model3_FIT15k.rds") # Load one object.
# Convergence analysis.
print(fit3)
traceplot(fit3)
# Lag en ok LaTeX tabell!
xtable(summary(fit3)$summary)
posterior <- as.data.frame(fit3)
y_pred <- posterior[, "y_pred"]
plot(density(y_pred))
tibble(y_pred) %>%
ggplot(aes(y_pred)) +
geom_density(aes(y = (..count..)/sum(..count..))) +
ggtitle("Mix of Gaussian")
ggsave("../626fca86090ba51a6aff419a/plots/postpred3.pdf", width = 7, height = 5)
# We select the statistics 1st quart, median and 3rd quart.
q.sim <- quantile(y_pred, c(0.25, 0.5, 0.75))
q.sim
# Compare with the same statistics in the data.
q.data <- quantile(dur, c(0.25, 0.5, 0.75))
q.data
